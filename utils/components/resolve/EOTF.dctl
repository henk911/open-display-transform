/* Electro-Optical Transfer Function 
    by Jed Smith - v0.0.1
    
    Calculates and applies a forward or inverse EOTF. Supported transfer functions:
      - Linear | No-op
      - sRGB Display | Pure 2.2 power function
      - Rec.1886 | Pure 2.4 power function
      - DCI Cinema | Pure 2.6 power function
      - Rec.2100 ST-2084 PQ | Perceptual quantizer EOTF
      - Rec.2100 HLG | Hybrid Log-Gamma transfer function, including full surround compensation model

    References
    ------------------
    Image parameter values for high dynamic range television for use in production and international programme exchange  
      https://www.itu.int/rec/R-REC-BT.2100
    High dynamic range television for production and international programme exchange 
      https://www.itu.int/pub/R-REP-BT.2390
    Perceptual Quantiser (PQ) to Hybrid Log-Gamma (HLG) Transcoding
      https://www.bbc.co.uk/rd/sites/50335ff370b5c262af000004/assets/592eea8006d63e5e5200f90d/BBC_HDRTV_PQ_HLG_Transcode_v2.pdf
    Guidance for operational practices in HDR television production  
      https://www.itu.int/pub/R-REP-BT.2408
*/

DEFINE_UI_PARAMS(EOTF, EOTF, DCTLUI_COMBO_BOX, 1, {A, B, C, D, E, F}, {Linear, 2.2 Power sRGB Display, 2.4 Power Rec.1886, 2.6 Power DCI, ST-2084 PQ, HLG});
DEFINE_UI_PARAMS(invert, invert, DCTLUI_CHECK_BOX, 1);
DEFINE_UI_PARAMS(PQ_Lw, PQ Lw, DCTLUI_SLIDER_FLOAT, 10000.0, 400.0, 10000.0, 10.0);
DEFINE_UI_PARAMS(HLG_Lw, HLG Lw, DCTLUI_SLIDER_FLOAT, 1000.0, 100.0, 1000.0, 10.0);
DEFINE_UI_PARAMS(HLG_Lb, HLG Lb, DCTLUI_SLIDER_FLOAT, 0.0, 0.0, 5.0, 0.0);
DEFINE_UI_PARAMS(HLG_Ls, HLG Ls, DCTLUI_SLIDER_FLOAT, 5.0, 0.0, 100.0, 1.0);


// ST2084 Constants
__CONSTANT__ float m1 = 2610.0f / 4096.0f * (1.0f / 4.0f);
__CONSTANT__ float m2 = 2523.0f / 4096.0f * 128.0f;
__CONSTANT__ float c1 = 107.0f / 128.0f;
__CONSTANT__ float c2 = 2413.0f / 128.0f;
__CONSTANT__ float c3 = 2392.0f / 128.0f;

// HLG Constants
__CONSTANT__ float a = 0.17883277f;

__DEVICE__ float3 powf(float3 a, float b) { return make_float3(_powf(a.x, b), _powf(a.y, b), _powf(a.z, b)); }


__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) 
{
  float3 rgb = make_float3(p_R, p_G, p_B);

  // Set up HLG Constants
  const float b = 1.0f - 4.0f * 0.17883277f;
  const float c = 0.5f - a * _logf(4.0f * a);
  const float g = 1.2f * _powf(1.111f, _log2f(HLG_Lw / 1000)) * _powf(0.98f, _log2f(max(1e-6f, HLG_Ls) / 5.0f));

  // Set up eotf
  int eotf;
  if (EOTF == A) eotf = 0; else if (EOTF == B) eotf = 1; else if (EOTF == C) eotf = 2; 
    else if (EOTF == D) eotf = 3; else if (EOTF == E) eotf = 4; else if (EOTF == F) eotf = 5;

  float p = 2.0f + eotf * 0.2f;
  if ((eotf > 0) && (eotf < 4)) { // Power Function
    if (invert == 0) {
      rgb = powf(rgb, p);
    } else {
      rgb = powf(rgb, 1.0f / p);
    }
  } else if (eotf == 4) { // ST2084 PQ
    if (invert == 0) {
      rgb = powf((powf(rgb, 1.0f / m2) - c1) / (c2 - c3 * powf(rgb, 1.0f / m2)),  1.0f / m1) * 10000.0f / PQ_Lw;
    } else {
      rgb = powf((c1 + c2 * powf(rgb * PQ_Lw / 10000.0f, m1))/(1.0f + c3 * powf(rgb * PQ_Lw / 10000.0f, m1)), m2);
    }
  } else if (eotf == 5) { // HLG
    float Ys = 0.2627f * rgb.x + 0.6780f * rgb.y + 0.0593f * rgb.z;
    if (invert == 0) {
      // HLG Inverse OETF
      rgb.x = rgb.x <= 0.5f ? (rgb.x * rgb.x) / 3.0f : (_expf((rgb.x - c)/ a) + b) / 12.0f;
      rgb.y = rgb.y <= 0.5f ? (rgb.y * rgb.y) / 3.0f : (_expf((rgb.y - c)/ a) + b) / 12.0f;
      rgb.z = rgb.z <= 0.5f ? (rgb.z * rgb.z) / 3.0f : (_expf((rgb.z - c)/ a) + b) / 12.0f;
      // HLG OOTF
      rgb = rgb * _powf(Ys, g - 1.0f);
    } else {
      // HLG Inverse OOTF
      rgb = rgb * _powf(Ys, (1.0f - g) / g);
      // HLG OETF
      rgb.x = rgb.x <= 1.0f / 12.0f ? _sqrtf(3.0f * rgb.x) : a * _logf(12.0f * rgb.x - b) + c;
      rgb.y = rgb.y <= 1.0f / 12.0f ? _sqrtf(3.0f * rgb.y) : a * _logf(12.0f * rgb.y - b) + c;
      rgb.z = rgb.z <= 1.0f / 12.0f ? _sqrtf(3.0f * rgb.z) : a * _logf(12.0f * rgb.z - b) + c;
    }
  }
  return rgb;
}