/*  OpenDRT Params
    -------------------------------------------------
      v0.0.81b4
      Written by Jed Smith
      https://github.com/jedypod/open-display-transform
    
    modified to expose more user parameters, for those who 
    know what they are doing and wish to experiment.

    Preset Values
    -------------
    Here's a rough sketch of what the parameters are for SDR and HDR
    SDR: Lw = Lp, Lg = 10.0, c = 1.4, toe = 0.01, sat = 1.2
    HDR: Lp = 10,000, Lw = nits, Lg = 15, maybe boosted a bit as Lw increases, c = 1.2, toe = 0.001 @ 1000 nits, toe = 0.00025 @ 4000 nits, sat = 1.0
    -------------------------------------------------
*/

DEFINE_UI_PARAMS(in_gamut, input gamut, DCTLUI_COMBO_BOX, 1, {ap0, ap1, p3d65, rec2020, rec709, awg, rwg, egamut, davinciwg}, {ACES, ACEScg, P3D65, Rec .2020, Rec .709, Alexa Wide Gamut, Red Wide Gamut RGB, Filmlight E - Gamut, DaVinci Wide Gamut});
DEFINE_UI_PARAMS(Lp, Lp, DCTLUI_SLIDER_FLOAT, 100.0, 100.0, 10000.0, 100.0);
DEFINE_UI_PARAMS(Lw, Lw, DCTLUI_SLIDER_FLOAT, 100.0, 100.0, 4000.0, 10.0);
DEFINE_UI_PARAMS(Lg, Lg, DCTLUI_SLIDER_FLOAT, 10.0, 1.0, 100.0, 1.0);
DEFINE_UI_PARAMS(c, contrast, DCTLUI_SLIDER_FLOAT, 1.4, 1, 1.5, 0.0);
DEFINE_UI_PARAMS(toe, toe, DCTLUI_SLIDER_FLOAT, 0.01, 0.0, 0.02, 0.001);
DEFINE_UI_PARAMS(surround, surround, DCTLUI_COMBO_BOX, 1, {average, dim, dark}, {average, dim, dark});
DEFINE_UI_PARAMS(hldc, hl dechroma, DCTLUI_SLIDER_FLOAT, 0.5, 0.0, 1.0, 0.0);
DEFINE_UI_PARAMS(sat, saturation, DCTLUI_SLIDER_FLOAT, 1.2, 0.5, 1.5, 0.0);
DEFINE_UI_PARAMS(wr, red weight, DCTLUI_SLIDER_FLOAT, 0.25, 0.0, 0.33, 0.0);
DEFINE_UI_PARAMS(wg, green weight, DCTLUI_SLIDER_FLOAT, 0.1, 0.0, 0.33, 0.0);
DEFINE_UI_PARAMS(wb, blue weight, DCTLUI_SLIDER_FLOAT, 0.09, 0.0, 0.33, 0.0);
DEFINE_UI_PARAMS(wp, whitepoint, DCTLUI_COMBO_BOX, 3, {D50, D55, D60, D65, D75, D93}, {D50, D55, D60, D65, D75, D93});
DEFINE_UI_PARAMS(EOTF, inverse eotf, DCTLUI_COMBO_BOX, 2, {lin, srgb, rec1886, dci, pq, hlg}, {Linear, 2.2 Power sRGB Display, 2.4 Power Rec .1886, 2.6 Power DCI, ST 2084 PQ, HLG});
DEFINE_UI_PARAMS(display_gamut, display gamut, DCTLUI_COMBO_BOX, 2, {Rec2020, P3D65, Rec709}, {Rec2020, P3D65, Rec709});
DEFINE_UI_PARAMS(invert, invert, DCTLUI_CHECK_BOX, 0);
DEFINE_UI_PARAMS(pdch, perceptual dechroma, DCTLUI_CHECK_BOX, 1);


#define identity_mtx make_float3x3(make_float3(1.0f, 0.0f, 0.0f), make_float3(0.0f, 1.0f, 0.0f), make_float3(0.0f, 0.0f, 1.0f))
#define matrix_ap0_to_xyz make_float3x3(make_float3(0.950362384319, 0.000000000000, 0.000093463248), make_float3(0.343966454268, 0.728166162968, -0.072132542729), make_float3(0.000000000000, 0.000000000000, 1.089057803154))
#define matrix_ap1_to_xyz make_float3x3(make_float3(0.660931229591, 0.133696138859, 0.155828580260), make_float3(0.272228747606, 0.674081742764, 0.053689509630), make_float3(-0.006018006243, 0.004383686464, 1.090692043304))
#define matrix_p3d65_to_xyz make_float3x3(make_float3(0.486571133137, 0.265667706728, 0.198217317462), make_float3(0.228974640369, 0.691738605499, 0.079286918044), make_float3(-0.000000000000, 0.045113388449, 1.043944478035))
#define matrix_rec2020_to_xyz make_float3x3(make_float3(0.636958122253, 0.144616916776, 0.168880969286), make_float3(0.262700229883, 0.677998125553, 0.059301715344), make_float3(0.000000000000, 0.028072696179, 1.060985088348))
#define matrix_rec709_to_xyz make_float3x3(make_float3(0.412390917540, 0.357584357262, 0.180480793118), make_float3(0.212639078498, 0.715168714523, 0.072192311287), make_float3(0.019330825657, 0.119194783270, 0.950532138348))
#define matrix_arriwg_to_xyz make_float3x3(make_float3(0.638007640839, 0.214703813195, 0.097744457424), make_float3(0.291953772306, 0.823840856552, -0.115794822574), make_float3(0.002798279049, -0.067034222186, 1.153293848038))
#define matrix_redwg_to_xyz make_float3x3(make_float3(0.735275208950, 0.068609409034, 0.146571278572), make_float3(0.286694079638, 0.842979073524, -0.129673242569), make_float3(-0.079680845141, -0.347343206406, 1.516081929207))
#define matrix_egamut_to_xyz make_float3x3(make_float3(0.705396831036, 0.164041340351, 0.081017754972), make_float3(0.280130714178, 0.820206701756, -0.100337378681), make_float3(-0.103781513870, -0.072907261550, 1.265746593475))
#define matrix_davinciwg_to_xyz make_float3x3(make_float3(0.700622320175, 0.148774802685, 0.101058728993), make_float3(0.274118483067, 0.873631775379, -0.147750422359), make_float3(-0.098962903023, -0.137895315886, 1.325916051865))
#define matrix_xyz_to_truelightlms make_float3x3(make_float3(0.18295, 0.859943, -0.031061), make_float3(-0.394427, 1.258988, 0.106423), make_float3(0.064856, -0.07625, 0.93164))

#define catd50 make_float3(0.171823f, 1.292538f, 1.228587f)
#define catd55 make_float3(0.176293f, 1.279333f, 1.100720f)
#define catd60 make_float3(0.179970f, 1.268278f, 1.005850f)
#define catd65 make_float3(0.182950f, 1.258988f, 0.931640f)
#define catd75 make_float3(0.187590f, 1.244085f, 0.827517f)
#define catd93 make_float3(0.193087f, 1.225341f, 0.717363f)

#define wnd50 make_float3(1.09063f, 1.1408f, 1.17646f)
#define wnd55 make_float3(1.05337f, 1.08334f, 1.10416f)
#define wnd60 make_float3(1.02355f, 1.037f, 1.0461f)
#define wnd65 make_float3(1.0f, 1.0f, 1.0f)
#define wnd75 make_float3(1.12915f, 1.13116f, 1.14486f)
#define wnd93 make_float3(1.30631f, 1.31116f, 1.34374f)

// Custom 3x3 matrix struct float3x3
typedef struct {
  float3 x, y, z;
} float3x3;

// Helper function to create a float3x3
__DEVICE__ float3x3 make_float3x3(float3 a, float3 b, float3 c) {
  float3x3 d;
  d.x = a;
  d.y = b;
  d.z = c;
  return d;
}

// Multiply float3 vector a and 3x3 matrix m
__DEVICE__ float3 mult_f3_f33(float3 a, float3x3 m) {
  return make_float3(
      m.x.x * a.x + m.x.y * a.y + m.x.z * a.z,
      m.y.x * a.x + m.y.y * a.y + m.y.z * a.z,
      m.z.x * a.x + m.z.y * a.y + m.z.z * a.z);
}

// Calculate inverse of 3x3 matrix: https://stackoverflow.com/questions/983999/simple-3x3-matrix-inverse-code-c
__DEVICE__ float3x3 inv_f33(float3x3 m) {
  float d = m.x.x * (m.y.y * m.z.z - m.z.y * m.y.z) -
            m.x.y * (m.y.x * m.z.z - m.y.z * m.z.x) +
            m.x.z * (m.y.x * m.z.y - m.y.y * m.z.x);
  float id = 1.0f / d;
  float3x3 c = identity_mtx;
  c.x.x = id * (m.y.y * m.z.z - m.z.y * m.y.z);
  c.x.y = id * (m.x.z * m.z.y - m.x.y * m.z.z);
  c.x.z = id * (m.x.y * m.y.z - m.x.z * m.y.y);
  c.y.x = id * (m.y.z * m.z.x - m.y.x * m.z.z);
  c.y.y = id * (m.x.x * m.z.z - m.x.z * m.z.x);
  c.y.z = id * (m.y.x * m.x.z - m.x.x * m.y.z);
  c.z.x = id * (m.y.x * m.z.y - m.z.x * m.y.y);
  c.z.y = id * (m.z.x * m.x.y - m.x.x * m.z.y);
  c.z.z = id * (m.x.x * m.y.y - m.y.x * m.x.y);
  return c;
}

// Calculate Half Chroma RGB Ratios: https://community.acescentral.com/t/gamut-mapping-part-2-getting-to-the-display/3506/89
__DEVICE__ float3 half_chroma(float3 rgb, float f) {
  float3 rats;
  float ch = _fmaxf(rgb.x, _fmaxf(rgb.y, rgb.z)) * f + _fminf(rgb.x, _fminf(rgb.y, rgb.z)) * (1.0f - f);
  rats.x = ch == 0.0f ? 0.0f : (ch - rgb.x) / ch;
  rats.y = ch == 0.0f ? 0.0f : (ch - rgb.y) / ch;
  rats.z = ch == 0.0f ? 0.0f : (ch - rgb.z) / ch;
  return rats;
}

// Perform a linear hue rotation on input rgb by rot, where 0 < rot < 6, where 6 = 360 degrees
__DEVICE__ float3 hue_rotate(float3 rgb, float rot) {
  float mx = _fmaxf(rgb.x, _fmaxf(rgb.y, rgb.z));
  float mn = _fminf(rgb.x, _fminf(rgb.y, rgb.z));
  float C = mx - mn;
  float H;
  if (C == 0.0f) H = 0.0f;
  else if (mx == rgb.x) H = _fmod((rgb.y - rgb.z) / C + 6.0f, 6.0f);
  else if (mx == rgb.y) H = (rgb.z - rgb.x) / C + 2.0f;
  else if (mx == rgb.z) H = (rgb.x - rgb.y) / C + 4.0f;
  H += rot;
  H = _fmod(H, 6.0f);
  float X = C * (1.0f - _fabs(_fmod(H, 2.0f) - 1.0f));
  float3 rot_rgb = make_float3(
    (H < 1.0f ? C : H < 2.0f ? X : H < 3.0f ? 0.0f : H < 4.0f ? 0.0f : H < 5.0f ? X : C) + mn,
    (H < 1.0f ? X : H < 2.0f ? C : H < 3.0f ? C : H < 4.0f ? X : H < 5.0f ? 0.0f : 0.0f) + mn,
    (H < 1.0f ? 0.0f : H < 2.0f ? 0.0f : H < 3.0f ? X : H < 4.0f ? C : H < 5.0f ? C : X) + mn);
  return rot_rgb;
}

// float3 power function with mix / lerp to input
__DEVICE__ float3 power_lerp(float3 rgb, float3 p, float f) {
  return make_float3(
    _fmaxf(0.0f, _powf(rgb.x, p.x) * f + rgb.x * (1.0f - f)),
    _fmaxf(0.0f, _powf(rgb.y, p.y) * f + rgb.y * (1.0f - f)),
    _fmaxf(0.0f, _powf(rgb.z, p.z) * f + rgb.z * (1.0f - f)));
}

// Helper functions to perform math operations on a float3 vector
__DEVICE__ float3 powf3(float3 a, float b) { return make_float3(_powf(a.x, b), _powf(a.y, b), _powf(a.z, b)); }
__DEVICE__ float3 sqrtf3(float3 a) { return make_float3(_sqrtf(a.x), _sqrtf(a.y), _sqrtf(a.z)); }
__DEVICE__ float3 maxf3(float3 a, float b) { return make_float3(_fmaxf(a.x, b), _fmaxf(a.y, b), _fmaxf(a.z, b)); }
__DEVICE__ float3 minf3(float3 a, float b) { return make_float3(_fminf(a.x, b), _fminf(a.y, b), _fminf(a.z, b)); }
__DEVICE__ float _sign(float x) { if (x > 0.0f) return 1.0f; if (x < 0.0f) return -1.0f; return 0.0f; }



__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{

  /* Parameters and Setup 
     ----------------------------------------------------------- */


  // Input gamut conversion to D65 aligned XYZ (CAT: xyz scaling)
  float3x3 in_to_xyz;
  if (in_gamut == ap0)             in_to_xyz = matrix_ap0_to_xyz;
  else if (in_gamut == ap1)        in_to_xyz = matrix_ap1_to_xyz;
  else if (in_gamut == p3d65)      in_to_xyz = matrix_p3d65_to_xyz;
  else if (in_gamut == rec2020)    in_to_xyz = matrix_rec2020_to_xyz;
  else if (in_gamut == rec709)     in_to_xyz = matrix_rec709_to_xyz;
  else if (in_gamut == awg)        in_to_xyz = matrix_arriwg_to_xyz;
  else if (in_gamut == rwg)        in_to_xyz = matrix_redwg_to_xyz;
  else if (in_gamut == egamut)     in_to_xyz = matrix_egamut_to_xyz;
  else if (in_gamut == davinciwg)  in_to_xyz = matrix_davinciwg_to_xyz;

  /* Whitepoint handling */

  // CAT scale: float3 storing diagonal matrix entries for scaling to target
  // illuminant in Truelight LMS colorspace on exit from rendering through inverse
  float3 cats;

  // Normalization factor for scaling output to compensate for peak white shift
  // due to chromatic adaptation to target whitepoint.
  // TODO: float3 for conveniance: x = rec2020, y = p3d65, z = rec709 : will need to support more for DCI
  float3 wn;

  // Set up whitepoint based on user parameters
  if (wp == D50)         cats = catd50, wn = wnd50;
  else if (wp == D55)    cats = catd55, wn = wnd55;
  else if (wp == D60)    cats = catd60, wn = wnd60;
  else if (wp == D65)    cats = catd65, wn = wnd65;
  else if (wp == D75)    cats = catd75, wn = wnd75;
  else if (wp == D93)    cats = catd93, wn = wnd93;

  // Set up forward and inverse Truelight LMS matrix with whitepoint values
  float3x3 xyz_to_tlms = matrix_xyz_to_truelightlms;
  float3x3 tlms_to_xyz = matrix_xyz_to_truelightlms;
  tlms_to_xyz.x.x = cats.x;
  tlms_to_xyz.y.y = cats.y;
  tlms_to_xyz.z.z = cats.z;
  tlms_to_xyz = inv_f33(tlms_to_xyz);

  // Set up display gamut conversion matrices: Rec2020, P3D65, Rec709
  float3x3 xyz_to_display;
  float w_n;
  if (display_gamut == Rec2020)       xyz_to_display = inv_f33(matrix_rec2020_to_xyz), w_n = wn.x;
  else if (display_gamut == P3D65)    xyz_to_display = inv_f33(matrix_p3d65_to_xyz), w_n = wn.y;
  else if (display_gamut == Rec709)   xyz_to_display = inv_f33(matrix_rec709_to_xyz), w_n = wn.z;


  // Surround illumination compensation. Super simple power model for SDR mainly.
  float ps;
  if (surround == average)    ps = 0.9f;
  else if (surround == dim)   ps = 0.95f;
  else if (surround == dark)  ps = 1.0f;


  /* Set up EOTF and inverse EOTF conversion parameters
     --------------------------------------------------- */
  int eotf;
  if (EOTF == lin) eotf = 0;
  else if (EOTF == srgb)    eotf = 1;
  else if (EOTF == rec1886) eotf = 2;
  else if (EOTF == dci)     eotf = 3;
  else if (EOTF == pq)      eotf = 4;
  else if (EOTF == hlg)     eotf = 5;

  // ST2084 Constants
  const float m1 = 2610.0f / 4096.0f * (1.0f / 4.0f);
  const float m2 = 2523.0f / 4096.0f * 128.0f;
  const float c1 = 107.0f / 128.0f;
  const float c2 = 2413.0f / 128.0f;
  const float c3 = 2392.0f / 128.0f;
  const float PQ_Lw = 10000.0f;

  // HLG Constants
  const float HLG_Lw = 1000.0f;
  const float HLG_Lb = 0.0f;
  const float HLG_Ls = 5.0f;
  const float h_a = 0.17883277f;
  const float h_b = 1.0f - 4.0f * 0.17883277f;
  const float h_c = 0.5f - h_a * _logf(4.0f * h_a);
  const float h_g = 1.2f * _powf(1.111f, _log2f(HLG_Lw / 1000.0f)) * _powf(0.98f, _log2f(_fmaxf(1e-6f, HLG_Ls) / 5.0f));

  /* Set up tonemap parameters
      Here we set up the parameter space for the tonemap function.
      A simple model for describing how the function changes with different display luminances.
  */

  // Power function: contrast (constrained through Lg) * surround (unconstrained)
  const float p = c * ps;
  // Grey scale factor, input (0.18) to output (grey nit level divided by peak nit level)
  const float2 g = make_float2(0.18f, Lg / Lp);
  // Simple model for describing how much output scale "boosting" we want, based on Lw.
  // The higher the nit level, the more we want to boost output scale, so that highlights are compressed less.
  const float h = 0.048f * Lw / 1000.0f + 1.033f;
  /* Final output scale: 
      - Lw / Lp : Display peak white normalization: e.g., if outputting peak white at 600 nits in PQ Lw / Lp = 600 / 10,000 = 1/6
      - h : Highlight compression amount. Varies with Lw. Never 1, so we always clip at some finite scene-referred input value.
        This model clips at scene-linear 38.0 at Lw = 100, 92.5 at Lw = 1000, 110.5 at Lw = 4000
      - w_n : normalization for output whitepoint adaptation
  */
  const float sy = Lw / Lp * h / w_n;

  // Input scale: calculates grey constraint based on output scale, grey input->output mapping
  const float gi = _powf(g.y / sy, 1.0f / c);
  const float sx = -gi / (g.x * (gi - 1.0f));


  // Normalization for weighted vector length norm so that achromatic values are not scaled
  const float wsum = _sqrtf(wr * wr + wg * wg + wb * wb);

  

  /* Forward Display Rendering 
     ----------------------------------------------------------- */

  float3 rgb = make_float3(p_R, p_G, p_B);

  if (invert == 0) {
    // input gamut to xyz d65 cat: xyz scaling
    rgb = mult_f3_f33(rgb, in_to_xyz);

    // XYZ to Truelight LMS D65 aligned
    rgb = mult_f3_f33(rgb, xyz_to_tlms);

    // Half chroma inverse RGB ratios, for use later in chroma compression
    float3 hch = half_chroma(rgb, 0.5f);

    // Weighted vector length norm
    rgb = maxf3(rgb, 1e-12f);
    float n = _sqrtf(_powf(wr * rgb.x, 2.0f) + _powf(wg * rgb.y, 2.0f) + _powf(wb * rgb.z, 2.0f)) / wsum;

    // RGB Ratios
    rgb /= n;

    // Tonemap: input scale -> shoulder compression -> contrast -> toe -> output scale
    n = n * sx;
    // Store scaled n for chroma compression factor
    float ns = n;
    n = n / (n + 1.0f);
    float ccf = n / ns;
    n = _powf(n, p);
    n = (n * n) / (n + toe);

    if (pdch == 1) {
      // Quasi-perceptual hue-path bias
      float3 ccf3 = make_float3(ccf, ccf, ccf);
      // bias reds toward orange
      ccf3 = power_lerp(ccf3, make_float3(1.0f, 1.5f, 1.1f), hue_rotate(hch, 1.5f).z);
      // bias blues towards cyan
      ccf3 = power_lerp(ccf3, make_float3(1.0f, 1.1f, 1.5f), hch.x);

      // chroma compression
      ccf3 = powf3(ccf3, hldc) * sat;
      
      // Lerp rgb ratios to 1.0 by chroma compress factor
      rgb.x = (1.0f - ccf3.x) + rgb.x * ccf3.x;
      rgb.y = (1.0f - ccf3.y) + rgb.y * ccf3.y;
      rgb.z = (1.0f - ccf3.z) + rgb.z * ccf3.z;
    } else {
      ccf = _powf(ccf, hldc) * sat;
      rgb = (1.0f - ccf) + rgb * ccf;
    }

    // Multiply rgb ratios by compressed norm
    rgb *= n;

    // LMS to XYZ + Whitepoint chromatic adaptation
    rgb = mult_f3_f33(rgb, tlms_to_xyz);
    rgb = mult_f3_f33(rgb, xyz_to_display);

    // Output scale
    rgb *= sy;

    // Clamp
    rgb = maxf3(minf3(rgb, Lw / Lp), 0.0f);

    /* Inverse EOTF
       -----------------------  */
    float eotf_p = 2.0f + eotf * 0.2f; 
    if ((eotf > 0) && (eotf < 4)) { // Power Function
      rgb = powf3(rgb, 1.0f / eotf_p);
    } else if (eotf == 4) { // ST2084 PQ
      rgb = powf3((c1 + c2 * powf3(rgb * PQ_Lw / 10000.0f, m1)) / (1.0f + c3 * powf3(rgb * PQ_Lw / 10000.0f, m1)), m2);
    } else if (eotf == 5) { // HLG
      float Yd = 0.2627f * rgb.x + 0.6780f * rgb.y + 0.0593f * rgb.z;
      // HLG Inverse OOTF
      rgb = rgb * _powf(Yd, (1.0f - h_g) / h_g);
      // HLG OETF
      rgb.x = rgb.x <= 1.0f / 12.0f ? _sqrtf(3.0f * rgb.x) : h_a * _logf(12.0f * rgb.x - h_b) + h_c;
      rgb.y = rgb.y <= 1.0f / 12.0f ? _sqrtf(3.0f * rgb.y) : h_a * _logf(12.0f * rgb.y - h_b) + h_c;
      rgb.z = rgb.z <= 1.0f / 12.0f ? _sqrtf(3.0f * rgb.z) : h_a * _logf(12.0f * rgb.z - h_b) + h_c;
    }
  } else {

    /* Inverse Display Rendering
       ------------------------------- */

    // Forward EOTF
    float eotf_p = 2.0f + eotf * 0.2f;
    if ((eotf > 0) && (eotf < 4)) {
      // Power Function
      rgb = powf3(rgb, eotf_p);
    } else if (eotf == 4) {
      // ST2084 PQ
      rgb = powf3((powf3(rgb, 1.0f / m2) - c1) / (c2 - c3 * powf3(rgb, 1.0f / m2)), 1.0f / m1) * 10000.0f / PQ_Lw;
    } else if (eotf == 5) {
      // HLG Inverse OETF
      rgb.x = rgb.x <= 0.5f ? rgb.x * rgb.x / 3.0f : (_expf((rgb.x - h_c) / h_a) + h_b) / 12.0f;
      rgb.y = rgb.y <= 0.5f ? rgb.y * rgb.y / 3.0f : (_expf((rgb.y - h_c) / h_a) + h_b) / 12.0f;
      rgb.z = rgb.z <= 0.5f ? rgb.z * rgb.z / 3.0f : (_expf((rgb.z - h_c) / h_a) + h_b) / 12.0f;
      // HLG OOTF
      float Ys = 0.2627f * rgb.x + 0.6780f * rgb.y + 0.0593f * rgb.z;
      rgb = rgb * _powf(Ys, h_g - 1.0f);
    }

    // Inverse output scale
    rgb /= sy;

    // display gamut to XYZ
    rgb = mult_f3_f33(rgb, inv_f33(xyz_to_display));

    // XYZ to LMS
    rgb = mult_f3_f33(rgb, inv_f33(tlms_to_xyz));

    // Half chroma inverse RGB ratios
    float3 hch = half_chroma(rgb, 0.5f);

    // Weighted vector length norm
    float n = _sqrtf(_powf(wr * rgb.x, 2.0f) + _powf(wg * rgb.y, 2.0f) + _powf(wb * rgb.z, 2.0f)) / wsum;
    n = _fmaxf(1e-12f, _fminf(0.999f, n));

    // RGB Ratios
    rgb /= n;

    
    /*  Inverse tone scale 
        ----------------------
        inverse toe -> inverse contrast -> inverse shoulder -> inverse input scale */
    n = (n + _sqrtf(n * (4.0f * toe + n))) / 2.0f;
    n = _powf(n, 1.0f / p);
    float ns = n;
    n = n / (1.0f - n);
    float ccf = ns / n;
    n /= sx;

    // Highlight Re-Chroma
    if (pdch == 1) {
      // Qperceptual-perceptual hue-path bias
      float3 ccf3 = make_float3(ccf, ccf, ccf);
      // bias reds toward orange
      ccf3 = power_lerp(ccf3, make_float3(1.0f, 1.5f, 1.1f), hue_rotate(hch, 1.5f).z);
      // bias blues towards cyan
      ccf3 = power_lerp(ccf3, make_float3(1.0f, 1.1f, 1.5f), hch.x);

      // chroma compression
      ccf3 = powf3(ccf3, hldc) * sat;
      
      // Inverse lerp rgb ratios to 1.0 by chroma compress factor
      rgb.x = (rgb.x - 1.0f) /  ccf3.x + 1.0f;
      rgb.y = (rgb.y - 1.0f) /  ccf3.y + 1.0f;
      rgb.z = (rgb.z - 1.0f) /  ccf3.z + 1.0f;
    } else {
      ccf = _powf(ccf, hldc) * sat;
      // Inverse Lerp rgb ratios
      rgb = (rgb - 1.0f) / ccf + 1.0f;
    }

    // Multiply rgb ratios by uncompressed norm
    rgb *= n;

    // LMS to XYZ
    rgb = mult_f3_f33(rgb, inv_f33(xyz_to_tlms));

    // XYZ to input gamut
    rgb = mult_f3_f33(rgb, inv_f33(in_to_xyz));
  }

  return rgb;
}