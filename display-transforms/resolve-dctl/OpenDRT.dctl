/*  OpenDRT 
    -------------------------------------------------
      v0.0.90b4
      Written by Jed Smith
      https://github.com/jedypod/open-display-transform
*/

DEFINE_UI_PARAMS(in_gamut, input gamut, DCTLUI_COMBO_BOX, 1, {ap0, ap1, p3d65, rec2020, rec709, awg, rwg, sgamut3, blackmagicwg, egamut, davinciwg}, {ACES, ACEScg, P3D65, Rec.2020, Rec.709, Alexa Wide Gamut, Red Wide Gamut RGB, Sony SGamut3, Blackmagic Wide Gamut, Filmlight E - Gamut, DaVinci Wide Gamut})
DEFINE_UI_PARAMS(in_curve, input curve, DCTLUI_COMBO_BOX, 0, {linear, acescct, arri_logc, red_log3g10, sony_slog3, blackmagic_film_gen5, filmlight_tlog, davinci_intermediate}, {Linear, ACEScct, Arri V3LogC, Red Log3G10, Sony SLog3, Blackmagic Film Gen5, Filmlight TLog, DaVinci Intermediate})
DEFINE_UI_PARAMS(preset, preset, DCTLUI_COMBO_BOX, 0, {sdr_rec1886, sdr_srgb, sdr_applep3, sdr_rec2020, hdr_rec2020_pq_100nit, hdr_rec2020_pq_600nit, hdr_rec2020_pq_1000nit, hdr_rec2020_hlg_1000nit, hdr_rec2020_pq_2000nit, hdr_rec2020_pq_4000nit, hdr_p3d65_pq_100nit, hdr_p3d65_pq_600nit, hdr_p3d65_pq_1000nit, hdr_p3d65_pq_2000nit, hdr_p3d65_pq_4000nit, dci_p3d60, dci_p3d65, dci_p3dci, dci_dcdm}, {Rec.1886: 2.4 Power | Rec.709, sRGB Display: 2.2 Power | Rec.709, Apple Display P3: 2.2 Power | P3D65, Rec.2020: 2.4 Power | Rec.2020, Rec.2100: ST 2084 PQ | Rec.2020 | 100 nit, Rec.2100: ST 2084 PQ | Rec.2020 | 600 nit, Rec.2100: ST 2084 PQ | Rec.2020 | 1000 nit, Rec.2100: HLG | Rec.2020 | 1000 nit, Rec.2100: ST 2084 PQ | Rec.2020 | 2000 nit, Rec.2100: ST 2084 PQ | Rec.2020 | 4000 nit, Dolby: ST 2084 PQ | P3D65 | 100 nit, Dolby: ST 2084 PQ | P3D65 | 600 nit, Dolby: ST 2084 PQ | P3D65 | 1000 nit, Dolby: ST 2084 PQ | P3D65 | 2000 nit, Dolby: ST 2084 PQ | P3D65 | 4000 nit, DCI: 2.6 Power | P3 D60, DCI: 2.6 Power | P3 D65, DCI: 2.6 Power | P3 DCI, DCI: 2.6 Power | DCDM XYZ})
DEFINE_UI_PARAMS(wp, whitepoint, DCTLUI_COMBO_BOX, 3, {D50, D55, D60, D65, D75, D93}, {D50, D55, D60, D65, D75, D93})
DEFINE_UI_PARAMS(invert, invert, DCTLUI_CHECK_BOX, 0)
DEFINE_UI_PARAMS(pdch, perceptual dechroma, DCTLUI_CHECK_BOX, 1)
DEFINE_UI_PARAMS(gcmp, gamut compress, DCTLUI_CHECK_BOX, 1)

#include "libDRT.h"

// Whitepoint normalization factors for each possible output display gamut
__CONSTANT__ wpnorm wnd50 = {1.09063f, 1.1408f, 1.09928f, 1.2469f, 1.17646f, 1.0f};
__CONSTANT__ wpnorm wnd55 = {1.05337f, 1.08334f, 1.04391f, 1.18409f, 1.10416f, 1.0f};
__CONSTANT__ wpnorm wnd60 = {1.02355f, 1.037f, 1.00028f, 1.13345f, 1.0461f, 1.0f};
__CONSTANT__ wpnorm wnd65 = {1.0f, 1.0f, 1.08307f, 1.15054f, 1.0f, 1.0f};
__CONSTANT__ wpnorm wnd75 = {1.12915f, 1.13116f, 1.22512f, 1.30144f, 1.14486f, 1.0f};
__CONSTANT__ wpnorm wnd93 = {1.30631f, 1.31116f, 1.42007f, 1.50853f, 1.34374f, 1.0f};


__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{

  /* Parameters and Setup 
     ----------------------------------------------------------- */

  // Input gamut conversion to D65 aligned XYZ (CAT: xyz scaling)
  float3x3 in_to_xyz;
  if (in_gamut == ap0)                in_to_xyz = matrix_ap0_to_xyz;
  else if (in_gamut == ap1)           in_to_xyz = matrix_ap1_to_xyz;
  else if (in_gamut == p3d65)         in_to_xyz = matrix_p3d65_to_xyz;
  else if (in_gamut == rec2020)       in_to_xyz = matrix_rec2020_to_xyz;
  else if (in_gamut == rec709)        in_to_xyz = matrix_rec709_to_xyz;
  else if (in_gamut == awg)           in_to_xyz = matrix_arriwg_to_xyz;
  else if (in_gamut == rwg)           in_to_xyz = matrix_redwg_to_xyz;
  else if (in_gamut == sgamut3)       in_to_xyz = matrix_sonysgamut3;
  else if (in_gamut == blackmagicwg)  in_to_xyz = matrix_blackmagicwg_to_xyz;
  else if (in_gamut == egamut)        in_to_xyz = matrix_egamut_to_xyz;
  else if (in_gamut == davinciwg)     in_to_xyz = matrix_davinciwg_to_xyz;

  /*    Convert input colorspace into CIE 1931 XYZ with D65 whitepoint, 
        using XYZ Scaling as the chromatic adaptation method.
        We convert XYZ into Truelight LMS colorspace, then normalize 
        so that D65 white is equal energy. This is our reference point.
        After display rendering we scale to output whitepoint in LMS.
    */
      
  const float3x3 xyz_to_in = inv_f33(in_to_xyz);

  // Transfer function for linearizing input
  int tf;
  if (in_curve == linear)                     tf = 0;
  else if (in_curve == acescct)               tf = 1;
  else if (in_curve == arri_logc)             tf = 2;
  else if (in_curve == red_log3g10)           tf = 3;
  else if (in_curve == sony_slog3)            tf = 4;
  else if (in_curve == filmlight_tlog)        tf = 5;
  else if (in_curve == davinci_intermediate)  tf = 6;
  else if (in_curve == blackmagic_film_gen5)  tf = 7;

  /* Whitepoint handling */

  // CAT scale factor for creative output whitepoint
  float3 cats;

  // Normalization factor to scale display light, compensating for peak white shift
  // due to chromatic adaptation to target creative whitepoint.
  wpnorm wn;
  
  // Set up whitepoint based on user parameters
  if (wp == D50)         cats = catd50, wn = wnd50;
  else if (wp == D55)    cats = catd55, wn = wnd55;
  else if (wp == D60)    cats = catd60, wn = wnd60;
  else if (wp == D65)    cats = catd65, wn = wnd65;
  else if (wp == D75)    cats = catd75, wn = wnd75;
  else if (wp == D93)    cats = catd93, wn = wnd93;

  // forward and inverse Truelight LMS matrix
  const float3x3 xyz_to_tlms = matrix_xyz_to_truelightlms;
  const float3x3 tlms_to_xyz = inv_f33(matrix_xyz_to_truelightlms);
  

  // highlight dechroma 
  const float dch = 0.5f;

  /* Set up presets
     ----------------------- */
  int eotf;
  float Lw, ps, sat, w_n;
  float3x3 xyz_to_display;

  if (preset == sdr_rec1886) Lw = 100.0f, ps = 0.95f, sat = 1.2f, xyz_to_display = inv_f33(matrix_rec709_to_xyz), w_n = wn.rec709, eotf = 2;
  else if (preset == sdr_srgb) Lw = 100.0f, ps = 0.9f, sat = 1.2f, xyz_to_display = inv_f33(matrix_rec709_to_xyz), w_n = wn.rec709, eotf = 1;
  else if (preset == sdr_applep3) Lw = 100.0f, ps = 0.9f, sat = 1.2f, xyz_to_display = inv_f33(matrix_p3d65_to_xyz), w_n = wn.p3d65, eotf = 1;
  else if (preset == sdr_rec2020) Lw = 100.0f, ps = 0.95f, sat = 1.2f, xyz_to_display = inv_f33(matrix_rec2020_to_xyz), w_n = wn.rec2020, eotf = 2;
  else if (preset == dci_p3d60) Lw = 100.0f, ps = 1.0f, sat = 1.2f, xyz_to_display = inv_f33(matrix_p3d60_to_xyz), w_n = wn.p3d60, eotf = 3;
  else if (preset == dci_p3d65) Lw = 100.0f, ps = 1.0f, sat = 1.2f, xyz_to_display = inv_f33(matrix_p3d65_to_xyz), w_n = wn.p3d65, eotf = 3;
  else if (preset == dci_p3dci) Lw = 100.0f, ps = 1.0f, sat = 1.2f, xyz_to_display = inv_f33(matrix_p3dci_to_xyz), w_n = wn.p3dci, eotf = 3;
  else if (preset == dci_dcdm) Lw = 100.0f,  52.37f / 48.0f, ps = 1.0f, sat = 1.2f, xyz_to_display = identity_mtx, w_n = wn.dcdm, eotf = 3;
  else if (preset == hdr_rec2020_pq_100nit) Lw = 100.0f, ps = 0.95f, sat = 1.2f, xyz_to_display = inv_f33(matrix_rec2020_to_xyz), w_n = wn.rec2020, eotf = 4;
  else if (preset == hdr_rec2020_pq_600nit) Lw = 600.0f, ps = 1.0f, sat = 1.0f, xyz_to_display = inv_f33(matrix_rec2020_to_xyz), w_n = wn.rec2020, eotf = 4;
  else if (preset == hdr_rec2020_pq_1000nit) Lw = 1000.0f, ps = 1.0f, sat = 1.0f, xyz_to_display = inv_f33(matrix_rec2020_to_xyz), w_n = wn.rec2020, eotf = 4;
  else if (preset == hdr_rec2020_hlg_1000nit) Lw = 1000.0f, ps = 1.0f, sat = 1.0f, xyz_to_display = inv_f33(matrix_rec2020_to_xyz), w_n = wn.rec2020, eotf = 5;
  else if (preset == hdr_rec2020_pq_2000nit) Lw = 2000.0f, ps = 1.0f, sat = 1.0f, xyz_to_display = inv_f33(matrix_rec2020_to_xyz), w_n = wn.rec2020, eotf = 4;
  else if (preset == hdr_rec2020_pq_4000nit) Lw = 4000.0f, ps = 1.0f, sat = 1.0f, xyz_to_display = inv_f33(matrix_rec2020_to_xyz), w_n = wn.rec2020, eotf = 4;
  else if (preset == hdr_p3d65_pq_100nit) Lw = 100.0f, ps = 0.95f, sat = 1.2f, xyz_to_display = inv_f33(matrix_p3d65_to_xyz), w_n = wn.p3d65, eotf = 4;
  else if (preset == hdr_p3d65_pq_600nit) Lw = 600.0f, ps = 1.0f, sat = 1.0f, xyz_to_display = inv_f33(matrix_p3d65_to_xyz), w_n = wn.p3d65, eotf = 4;
  else if (preset == hdr_p3d65_pq_1000nit) Lw = 1000.0f, ps = 1.0f, sat = 1.0f, xyz_to_display = inv_f33(matrix_p3d65_to_xyz), w_n = wn.p3d65, eotf = 4;
  else if (preset == hdr_p3d65_pq_2000nit) Lw = 2000.0f, ps = 1.0f, sat = 1.0f, xyz_to_display = inv_f33(matrix_p3d65_to_xyz), w_n = wn.p3d65, eotf = 4;
  else if (preset == hdr_p3d65_pq_4000nit) Lw = 4000.0f, ps = 1.0f, sat = 1.0f, xyz_to_display = inv_f33(matrix_p3d65_to_xyz), w_n = wn.p3d65, eotf = 4;

  
  const float3x3 display_to_xyz = inv_f33(xyz_to_display);

  /* Tone Scale
      OpenDRT uses a simple tonescale based on the Michaelis-Menten equation
      to map scene-referred to display-referred. Then a parabolic 
      toe compression function is used for flare compensation. 
      The behavior of the tonescale function is controlled using a simple
      model, driven by a single variable (Lw) describing display peak luminance.
      https://www.desmos.com/calculator/ssx2a1bpsz

      And another plot which does not include the parameter model:
      https://www.desmos.com/calculator/85ctrzzt4y
      
      The Michaelis-Menten equation has been shown to describe the response of photoreceptor
      cells in the retina:
      http://retina.anatomy.upenn.edu/~rob/lance/michaelis.html
      https://pubmed.ncbi.nlm.nih.gov/6666056/2

      This implementation is inspired by Daniele Siragusano's post:
      https://community.acescentral.com/t/output-transform-tone-scale/3498/14

      First we set up the parameter space which controls the function.
      This is a simple model for describing how the function changes with 
      different display luminance and surround illumination conditions.
    Parameters:
      - Lw: Peak display luminance. Drives the model for the tonescale.
      - Contrast: Power function applied to the compressed image.
        Model smoothly varies between ~1.4 in @ Lw = 100 nits to ~1.17 @ Lw = 4000 nits
      - Surround: Power function to compensate for surround illumination.
        We "gamma up" a bit when surround illumination is increased.
      - Flare: Display-referred flare or glare compensation.
      - Input Scale: scene-linear exposure adjustment or input domain scale.
      - Output Scale: display-linear scale. 
        - Boost scale so we clip at some finite scene-referred value.
        - Normalize for PQ or HLG HDR output (PQ defines 1.0 as 10,000 nits).
        - Compensate for creative whitepoint adjustments.
  */
  
  // Calculate tonescale parameters
  const float c = 12.0f * _powf(Lw, -0.86f) + 1.17f;
  const float p = c * ps;
  const float fl = 1.0f / Lw;
  const float sx = 0.016f * _powf(Lw, 0.87f) - 0.17f;
  const float sy = 1.036f + 0.00005f * Lw;

  // Display output normalization
  const float ds = eotf == 4 ? Lw / 10000.0f : eotf == 5 ? Lw / 1000.0f : preset == dci_dcdm ? 48.0f / 52.37f : 1.0f;
  // Display maximum for display-linear clamp.
  const float clamp_max = preset == dci_dcdm ? 1.0f : ds;
  

  // R G B weights for vector length norm. Affects luminance and chroma of output color.
  const float3 vw = make_float3(0.25f, 0.1f, 0.09f);

  // Normalization for weighted vector length norm so that achromatic values are not scaled
  const float vwn = _sqrtf(vw.x*vw.x + vw.y*vw.y + vw.z*vw.z);

  

  /* Forward Display Rendering 
     ----------------------------------------------------------- */

  float3 rgb = make_float3(p_R, p_G, p_B);


  if (invert == 0) {
    // Linearize input
    rgb = log2lin(rgb, tf);

    // Input gamut to xyz d65 cat: xyz scaling
    rgb = mult_f3_f33(rgb, in_to_xyz);

    // XYZ to Truelight LMS
    float3 lms = mult_f3_f33(rgb, xyz_to_tlms);

    // Normalize D65 white to equal energy
    lms /= catd65;

    float3 dlms_ndc = lms; // Store for perceptual dechroma

    // Chroma compression for highly out of gamut values. Values tuned to protect CC24 values.
    if (gcmp == 1) {
      float3 yrg = lms_to_yrg(lms, 1);
      float gcf = compress_parabolic(yrg.y, 0.35f, 1.0f, 0.45f) / yrg.y;
      lms = (lms.x + lms.y + lms.z) / 3.0f * (1.0f - gcf) + lms * gcf;
    }
    
    // Weighted vector length norm
    lms = maxf3(1e-12f, lms);
    float n = _sqrtf(_powf(vw.x * lms.x, 2.0f) + _powf(vw.y * lms.y, 2.0f) + _powf(vw.z * lms.z, 2.0f)) / vwn;

    // Tonescale and flare compensation
    float ns = sy * _powf(n / (n + sx), p);
    float nt = ns * ns / (ns + fl);
    float ts = nt / n; // tone scale

    // Chroma compression factor
    float ccf = _powf(sx / (n + sx), dch) * sat;

    // Display-referred LMS
    float3 dlms = lms * ts;
    
    // Display referred LMS without chroma compression
    dlms_ndc = dlms_ndc * ts;

    // Compress chroma: chromaticity-linear desaturation by ccf
    dlms = nt * (1.0f - ccf) + dlms * ccf;

    // Apply output creative output whitepoint scale to both scene lms and display lms
    // Also normalize by w_n so that channels are not pushed above display peak luminance. 
    // For example if using a D55 whitepoint, without normalization the R channel would be > 1
    dlms *= cats / w_n;
    dlms_ndc *= cats / w_n;
    
    // Convert from Truelight LMS to XYZ
    float3 xyz = mult_f3_f33(dlms, tlms_to_xyz);

    // Distort chromaticity-linear chroma compression along perceptual hue paths using JzAzBz
    if (pdch == 1) {
      float3 jz = xyz_to_jzazbz(xyz, 1);

      // Scene-linear XYZ tristimulus without any chroma compression. To use as our source hue.
      float3 xyz_ndc = mult_f3_f33(dlms_ndc, tlms_to_xyz);
      float3 jz_ndc = xyz_to_jzazbz(xyz_ndc, 1);
      
      // Copy hue from jz_ndc: Effectively warps the hue from chromaticity-linear to perceptual.
      jz.z = jz_ndc.z;
    
      xyz = jzazbz_to_xyz(jz, 1);
    }

    // Convert XYZ to display gamut
    rgb = mult_f3_f33(xyz, xyz_to_display);

    // Scale for display device
    rgb *= ds;

    // Clamp
    rgb = clampf3(rgb, 0.0f, clamp_max);

    // Inverse EOTF
    float eotf_p = 2.0f + eotf * 0.2f; 
    if ((eotf > 0) && (eotf < 4)) { // Power Function
      rgb = powf3(rgb, 1.0f / eotf_p);
    } else if (eotf == 4) { // ST2084 PQ
      rgb = eotf_pq(rgb, 1, 0);
    } else if (eotf == 5) { // HLG
      rgb = eotf_hlg(rgb, 1);
    }
  } else {
    
    /* Inverse Display Rendering
       -------------------------
        Inverse will not be an exact match, due to multiple factors:
        - Limitations of display gamut volume
        - Mis-matches in more saturated colors due to weighted vector length norm
        - Gamut compression not included in inverse
        - Perceptual dechroma not included in inverse    
    */
    
    rgb = clampf3(rgb, 0.0f, 1.0f);

    // Forward EOTF
    float eotf_p = 2.0f + eotf * 0.2f;
    if ((eotf > 0) && (eotf < 4)) { // Power Function
      rgb = powf3(rgb, eotf_p);
    } else if (eotf == 4) { // ST2084 PQ
      rgb = eotf_pq(rgb, 0, 0);
    } else if (eotf == 5) { // HLG
      rgb = eotf_hlg(rgb, 0);
    }

    // Inverse output scale
    rgb /= ds;

    // display gamut to XYZ
    float3 xyz = mult_f3_f33(rgb, display_to_xyz);

    // XYZ to LMS
    float3 lms = mult_f3_f33(xyz, xyz_to_tlms);

    // Inverse output creative output whitepoint scale
    lms /= cats;
    lms = clampf3(lms, 0.0f, 1.0f);

    // Weighted vector length norm
    float n = _sqrtf(_powf(vw.x * lms.x, 2.0f) + _powf(vw.y * lms.y, 2.0f) + _powf(vw.z * lms.z, 2.0f)) / vwn;
    n = _fmaxf(1e-12f, _fminf(0.999f, n));

    // Inverse tone scale 
    float nt = (n + _sqrtf(n * (4.0f * fl + n))) / 2.0f;
    float np = _powf(nt / sy, 1.0f / p);
    float ns = (np/(1.0f - np)) * sx;
    float ccf = ns == 0.0f ? 0.0f : _powf(_powf(nt, 1.0f / p) / (ns / sx), dch) * sat;

    // chroma expand
    float3 dlms = (n * (ccf - 1.0f) + lms) / ccf * ns / n;

    // Inverse D65 Normalization
    dlms *= catd65;
    lms *= catd65;

    // LMS to XYZ
    xyz = mult_f3_f33(dlms, tlms_to_xyz);

    // Un-Distort chromaticity-linear chroma compression along perceptual hue paths using JzAzBz
    if (pdch == 1) {
      float3 jz = xyz_to_jzazbz(xyz, 1);
    
      // Scene-linear XYZ tristimulus without any chroma compression. To use as our source hue.
      float3 xyz_ndc = mult_f3_f33(lms, tlms_to_xyz);
      float3 jz_ndc = xyz_to_jzazbz(xyz_ndc, 1);
      
      // Copy hue from jz_ndc: Effectively warps the hue from perceptual to chromaticity-linear.
      jz.z = jz_ndc.z;
    
      xyz = jzazbz_to_xyz(jz, 1);
    }

    // XYZ to input gamut.
    rgb = mult_f3_f33(xyz, xyz_to_in);
    
    // Return to working space
    rgb = lin2log(rgb, tf);
  }

  return rgb;
}